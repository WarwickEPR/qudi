# Config file for a simple simulation of the core functions: Confocal, counter,
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    module_server:
      address: ''
      port: 12345
      certfile: 'c:\Users\Confocal\certs\rt-cert.pem'
      keyfile: 'c:\Users\Confocal\certs\rt-key.pem'

    # list of modules to load when starting
    startup: ['man', 'tray','tasklogic']

    # For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:
    timetaggerSlow:
        module.Class: 'timetagger_counter.TimeTaggerCounter'
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 1
        timetagger_sum_channels: False

    timetaggerFast:
        module.Class: 'swabian_instruments.timetagger_fast_counter.TimeTaggerFastCounter'
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 1
        timetagger_channel_detect: 7
        timetagger_channel_sequence: 6
        timetagger_sum_channels: True

    gem532:
        module.Class: 'laser.laserquantum_laser.LaserQuantumLaser'
        psu: SMD6000
        interface: 'COM8'
        maxpower: 0.1

    keysight1:
        module.Class: 'microwave.mw_source_keysight.MicrowaveKeysight'
        address: 'TCPIP0::192.168.1.101::inst0::INSTR'
        timeout: 10000
        trigger: 'TRIG2'

    pulsestreamer:
        module.Class: 'swabian_instruments.pulse_streamer.PulseStreamer'
        ip_address: '192.168.1.100'
        laser_channel: 'd_ch2'
        uw_x_channel: 'd_ch3'
        uw_y_channel: 'd_ch4'

    nicard:
        module.Class: 'national_instruments_x_series.NationalInstrumentsXSeries'
        clock_channel: '/Dev1/Ctr0'
        scanner_clock_channel: '/Dev1/Ctr2'
        photon_sources: ['/Dev1/PFI8']
        counter_channels: ['/Dev1/Ctr1']
        scanner_counter_channels: ['/Dev1/Ctr3']
        gate_in_channel: '/Dev1/PFI10'
        odmr_trigger_channel: '/Dev1/PFI0'
        odmr_trigger_line: 'Dev1/port0/line0'
        odmr_switch_line: 'Dev1/port0/line1'
        counting_edge_rising: True
        clock_frequency: 100
        scanner_clock_frequency: 100
        scanner_ao_channels:
            - '/Dev1/AO0'
            - '/Dev1/AO1'
            - '/Dev1/AO2'
            - '/Dev1/AO3'
        scanner_voltage_ranges:
            - [-10,10]
            - [-10,10]
            - [-10,10]
            - [0,1.5]
        scanner_position_ranges:
            - [0,300e-6]
            - [0,300e-6]
            - [0,300e-6]
        a_voltage: 1.5
        a_other: True
        samples_number: 50

    niprocess:
        module.Class: 'ni_process.NIProcess'
        module.Class: 'ni_card.NICard'
        clock_channel: '/Dev1/Ctr0'
        counter_channel: '/Dev1/Ctr1'
        scanner_clock_channel: '/Dev1/Ctr2'
        scanner_counter_channel: '/Dev1/Ctr3'
        photon_source: '/Dev1/PFI8'
        scanner_x_ao: '/Dev1/AO0'
        scanner_y_ao: '/Dev1/AO1'
        scanner_z_ao: '/Dev1/AO2'
        gate_in_channel: '/Dev1/PFI10'
        odmr_trigger_channel: '/Dev1/PFI0'
        counting_edge_rising: True
        clock_frequency: 100
        scanner_clock_frequency: 100
        x_range: [0, 300e-6]
        y_range: [0, 300e-6]
        z_range: [0, 300e-6]
        voltage_range: [-10, 10]
        samples_number: 50

    zaber:
        module.Class: 'motor.zaber_motor_rotation_stage.MotorRotationZaber'
        com_port: 'COM7'
        baud_rate: 9600
        timeout: 1000
        term_char: '\n'
        micro_step_size: 234.375e-6
        speed_conversion: 9.375

        axes:
            -   label: 'phi'
                id: 1
                angle_min: -20 # degrees
                angle_max: 100
                angle_step: 0.1
                velocity_min: 0.1 # degrees/s
                velocity_max: 5
                velocity_step: .1

            -   label: 'theta'
                id: 2
                angle_min: -60
                angle_max: 60
                angle_step: 0.1
                velocity_min: 0.1
                velocity_max: 5
                velocity_step: .1

    agilis_motor:
        module.Class: 'motor.agilis_controller.AgilisController'
        com_interface: 'COM4'
        axis_labels:
            - hwp_532
            - det_pol
            - hwp_488
        # Define pitch as number of steps per degree
        # Unfortunately pitch will vary often for PR100 mounts
        # So will need to keep a track on it
        hwp_532:
            motor_type: PR100
            channel: 1
            axis: 1
            unit: 'degrees'
            # was 580
            pos_pitch: 574
            # was 506
            neg_pitch: 500
            constraints:
                pos_min: -360
                pos_max: 720
        det_pol:
            motor_type: PR100
            channel: 1
            axis: 2
            unit: 'degrees'
            pos_pitch: 477
            neg_pitch: 453
            constraints:
                pos_min: -360
                pos_max: 720
        hwp_488:
            motor_type: PR100
            channel: 2
            axis: 1
            unit: 'degrees'
            pos_pitch: 574
            neg_pitch: 500
            constraints:
                pos_min: -360
                pos_max: 720

    apt_motors:
        module.Class: 'motor.aptmotor.APTStage'
        dll_path: 'C:\\Program Files\\Thorlabs\\APT\\APT Server\\APT.dll'
        axis_labels: ['maglinear']
        maglinear:
            hw_type: 'TDC001'
            serial_num: 27252314
            pitch: 1
            unit: 'm'
            constraints:
                pos_min: 0.0
                pos_max: 0.025
                vel_min: 0.00055
                vel_max: 0.0009
                acc_min: 0.0001
                acc_max: 0.002

logic:
    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'nicard'
            savelogic: 'savelogic'

    gatedcounterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'nicard'
            savelogic: 'savelogic'

    counter_ttlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'timetaggerSlow'
            savelogic: 'savelogic'

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'nicard'
            savelogic: 'savelogic'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'nicard'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'nicard'
            fitlogic: 'fitlogic'

    odmrlogic:
        module.Class: 'odmr_logic.ODMRLogic'
        scanmode: 'LIST'
        connect:
            odmrcounter: 'nicard'
            fitlogic: 'fitlogic'
            microwave1: 'keysight1'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'

    # Any scan using a fourth analogue output to scan a parameter
    # laserscannerlogic:
    #    module.Class: 'laser_scanner_logic.LaserScannerLogic'
    #    connect:
    #        confocalscanner1: 'nicard'
    #        savelogic: 'savelogic'

    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
            scannerLocationRefocus:
                module: 'refocus'
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'

    automationlogic:
        module.Class: 'automation.AutomationLogic'
        connect:
            taskrunner: 'tasklogic'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        log_into_daily_directory: False
        win_data_directory: 'Z:\Sample Data\Confocal'
        unix_data_directory: 'Data/'

    spectrumlogic:
        module.Class: 'spectrum.SpectrumLogic'
        connect:
            spectrometer: 'oceanoptics_spectrometer'
            savelogic: 'savelogic'
            odmrlogic: 'odmrlogic'
            fitlogic: 'fitlogic'

    magnet_logic:
        module.Class: 'magnet_logic.MagnetLogic'
        connect:
            magnetstage: 'magnet_motor_interfuse'
            optimizerlogic: 'optimizerlogic'
            counterlogic: 'counterlogic'
            odmrlogic: 'odmrlogic'
            savelogic: 'savelogic'
            scannerlogic: 'scannerlogic'
            traceanalysis: 'trace_analysis_logic'
            gatedcounterlogic: 'gatedcounterlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    magnet_motor_interfuse:
        module.Class: 'interfuse.magnet_motor_interfuse.MagnetMotorInterfuse'
        connect:
            motorstage: 'zaber'

    trace_analysis_logic:
        module.Class: 'trace_analysis_logic.TraceAnalysisLogic'
        connect:
            counterlogic1: 'gatedcounterlogic'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'

    laserlogic:
        module.Class: 'laser_logic.LaserLogic'
        query_interval: 500
        connect:
            laser: 'gem532'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic'
            optimiserlogic: 'optimizerlogic'
            savelogic: 'savelogic'

    pulsedmasterlogic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    sequencegeneratorlogic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #additional_methods_dir: 'C:/Users/Confocal/pulse_sequences'
        connect:
            pulsegenerator: 'pulsestreamer'

    pulsedmeasurementlogic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        connect:
            fastcounter: 'timetaggerFast'
            pulsegenerator: 'pulsestreamer'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            microwave: 'keysight1'

    polarizationlogic:
        module.Class: 'optical_polarisation_logic.OpticalPolLogic'
        connect:
            motorstage: 'agilis_motor'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'
            counter: 'timetaggerSlow'
            optimizer1: 'optimizerlogic'
            scannerlogic: 'scannerlogic'
        # define resolution in degrees
        # resolution: 5
        # define time in s per resolution point
        measurement_length: 5
        # timetagger count frequency and apds
        count_frequency: 50
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 1

    switchinglogic:
        module.Class: 'switching_rates_logic.SwitchingLogic'
        connect:
            laser: 'gem532'
            savelogic: 'savelogic'
            counter: 'timetaggerSlow'
            optimizer1: 'optimizerlogic'
            scannerlogic: 'scannerlogic'
        count_frequency: 50
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 1
        # Set powers to investigate (in mW)
        laser_powers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    hbtlogic:
        module.Class: 'hbt_logic.HbtLogic'
        connect:
            savelogic: 'savelogic'
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 1
        bin_width: 800
        bins: 5000

    imagestacklogic:
        module.Class: 'image_stack_logic.ImageStackLogic'
        connect:
            motorstage: 'agilis_motor'
            savelogic: 'savelogic'
            optimizer1: 'optimizerlogic'
            scannerlogic: 'scannerlogic'

    aomlogic:
        module.Class: 'aom_logic.AomLogic'
        connect:
            voltagescanner: 'nicard'
            laser: 'gem532'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'
        voltage: [0.4000,0.4500,0.5000,0.5500,0.6000,0.6500,0.7000,0.7500,0.8000,0.8500,0.9000,0.9500,1.0000,1.1000,1.2000,1.3000,1.4000,1.5000]
        efficiency: [1.80E-05,1.92E-05,2.64E-05,1.61E-04,1.51E-03,5.76E-03,1.32E-02,2.35E-02,3.62E-02,4.97E-02,6.40E-02,7.85E-02,9.11E-02,1.15E-01,1.33E-01,1.46E-01,1.57E-01,1.66E-01]

gui:
    tray:
        module.Class: 'trayicon.TrayIcon'
    man:
        module.Class: 'manager.managergui.ManagerGui'

    counter_nicard:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    counter_timetagger:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counter_ttlogic'

    confocal:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02
        default_meter_prefix: 'u'

    hbt:
        module.Class: 'hbt.hbtgui.HbtGui'
        connect:
            hbtlogic: 'hbtlogic'
        time_window: 100

    poimanager:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic: 'poimanagerlogic'
            scannerlogic: 'scannerlogic'

    aom:
        module.Class: 'aom.aomgui.AomGui'
        connect:
            aomlogic: 'aomlogic'

    laser:
        module.Class: 'laser.laser.LaserGUI'
        connect:
            laserlogic: 'laserlogic'

    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic'
            savelogic: 'savelogic'

    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic'

    taskrunner:
        module.Class: 'taskrunner.taskgui.TaskGui'
        connect:
            tasklogic: 'tasklogic'

    automation:
        module.Class: 'automation.automationgui.AutomationGui'
        connect:
            automationlogic: 'automationlogic'

    spectrometer:
        module.Class: 'spectrometer.spectrometergui.SpectrometerGui'
        connect:
            spectrumlogic: 'spectrumlogic'

    magnet:
        module.Class: 'magnet.magnet_gui.MagnetGui'
        connect:
            magnetlogic1: 'magnet_logic'
            savelogic: 'savelogic'


