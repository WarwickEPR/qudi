# Config file for a simple simulation of the core functions: Confocal, counter,
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray']

    # Devices are defined in another config file:
    #hardware: readConfigFile('devices.cfg')
    serveraddress: 'localhost'
    serverport: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:
    timetaggerSlow:
        module.Class: 'timetagger_counter.TimeTaggerCounter'
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 1
        timetagger_sum_channels: False

    timetaggerFast:
        module.Class: 'swabian_instruments.timetagger_fast_counter.TimeTaggerFastCounter'
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 1
        timetagger_channel_detect: 7
        timetagger_channel_sequence: 6
        timetagger_sum_channels: True

    gem532:
        module.Class: 'laser.laserquantum_laser.LaserQuantumLaser'
        psu: SMD6000
        interface: 'COM5'
        maxpower: 0.1

    keysight1:
        module.Class: 'microwave.mw_source_keysight.MicrowaveKeysight'
        address: 'TCPIP0::192.168.1.101::inst0::INSTR'
        timeout: 10000
        trigger: 'TRIG2'

    pulsestreamer:
        module.Class: 'swabian_instruments.pulse_streamer.PulseStreamer'
        pulsestreamer_ip: '192.168.1.100'
        pulsed_file_dir: 'C:\Users\Confocal\pulsed_files'
        laser_channel: 1
        uw_x_channel: 2

    nicard:
        module.Class: 'national_instruments_x_series.NationalInstrumentsXSeries'
        clock_channel: '/Dev1/Ctr0'
        scanner_clock_channel: '/Dev1/Ctr2'
        photon_sources: ['/Dev1/PFI8']
        counter_channels: ['/Dev1/Ctr1']
        scanner_counter_channels: ['/Dev1/Ctr3']
        gate_in_channel: '/Dev1/PFI10'
        odmr_trigger_channel: '/Dev1/PFI0'
        counting_edge_rising: True
        clock_frequency: 100
        scanner_clock_frequency: 100
        x_range: [0, 300e-6]
        y_range: [0, 300e-6]
        z_range: [0, 300e-6]
        scanner_x_ao: '/Dev1/AO0'
        scanner_y_ao: '/Dev1/AO1'
        scanner_z_ao: '/Dev1/AO2'
        scanner_voltage_ranges: [[-10,10],[-10,10],[-10,10],[0,1.5]]
        scanner_position_ranges: [[0,300e-6],[0,300e-6],[0,300e-6]]
        scanner_ao_channels: ['/Dev1/AO0','/Dev1/AO1','/Dev1/AO2','/Dev1/AO3']
        a_voltage: 1.5
        a_other: True
        voltage_range: [-10, 10]
        samples_number: 50

    niprocess:
        module.Class: 'ni_process.NIProcess'
        module.Class: 'ni_card.NICard'
        clock_channel: '/Dev1/Ctr0'
        counter_channel: '/Dev1/Ctr1'
        scanner_clock_channel: '/Dev1/Ctr2'
        scanner_counter_channel: '/Dev1/Ctr3'
        photon_source: '/Dev1/PFI8'
        scanner_x_ao: '/Dev1/AO0'
        scanner_y_ao: '/Dev1/AO1'
        scanner_z_ao: '/Dev1/AO2'
        gate_in_channel: '/Dev1/PFI10'
        odmr_trigger_channel: '/Dev1/PFI0'
        counting_edge_rising: True
        clock_frequency: 100
        scanner_clock_frequency: 100
        x_range: [0, 300e-6]
        y_range: [0, 300e-6]
        z_range: [0, 300e-6]
        voltage_range: [-10, 10]
        samples_number: 50

    agilis_motor:
        module.Class: 'motor.agilis_controller.AgilisController'
        com_interface: 'COM4'
        axis_labels:
            - hwp_532
            - det_pol
            - hwp_488
        # Define pitch as number of steps per degree
        # Unfortunately pitch will vary often for PR100 mounts
        # So will need to keep a track on it
        hwp_532:
            motor_type: PR100
            channel: 1
            axis: 1
            unit: 'degrees'
            # was 580
            pos_pitch: 574
            # was 506
            neg_pitch: 500
            constraints:
                pos_min: -360
                pos_max: 720
        det_pol:
            motor_type: PR100
            channel: 1
            axis: 2
            unit: 'degrees'
            pos_pitch: 477
            neg_pitch: 453
            constraints:
                pos_min: -360
                pos_max: 720
        hwp_488:
            motor_type: PR100
            channel: 2
            axis: 1
            unit: 'degrees'
            pos_pitch: 574
            neg_pitch: 500
            constraints:
                pos_min: -360
                pos_max: 720

logic:
    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'nicard'
            savelogic: 'savelogic'

    counter_ttlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'timetaggerSlow'
            savelogic: 'savelogic'

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'nicard'
            savelogic: 'savelogic'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'nicard'
            fitlogic: 'fitlogic'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic'
            optimizer1: 'optimizerlogic'
            savelogic: 'savelogic'

    pulsedmasterlogic:
        module.Class: 'pulsed_master_logic.PulsedMasterLogic'
        direct_write: False
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    sequencegeneratorlogic:
        module.Class: 'sequence_generator_logic.SequenceGeneratorLogic'
        additional_methods_dir: 'C:/Users/Confocal/pulse_sequences'
        #overhead_bytes: 4294967296  Not properly implemented yet

    pulseextractionlogic:
        module.Class: 'pulse_extraction_logic.PulseExtractionLogic'

    pulseanalysislogic:
        module.Class: 'pulse_analysis_logic.PulseAnalysisLogic'

    pulsedmeasurementlogic:
        module.Class: 'pulsed_measurement_logic.PulsedMeasurementLogic'
        connect:
            fastcounter: 'timetaggerFast'
            pulseanalysislogic: 'pulseanalysislogic'
            pulseextractionlogic: 'pulseextractionlogic'
            pulsegenerator: 'pulsestreamer'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            microwave: 'keysight1'

    laserlogic:
        module.Class: 'laser_logic.LaserLogic'
        connect:
            laser: 'gem532'

    hbtlogic:
        module.Class: 'hbt_logic.HbtLogic'
        connect:
            savelogic: 'savelogic'
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 1
        bin_width: 500
        bins: 3000

    odmrlogic:
        module.Class: 'odmr_logic.ODMRLogic'
        scanmode: 'LIST'
        connect:
            odmrcounter: 'nicard'
            fitlogic: 'fitlogic'
            microwave1: 'keysight1'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'

    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        log_into_daily_directory: False
        win_data_directory: 'Z:\Sample Data\Confocal'
        unix_data_directory: 'Data/'

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
            scannerLocationRefocus:
                module: 'refocus'
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'

    polarizationlogic:
        module.Class: 'optical_polarisation_logic.OpticalPolLogic'
        connect:
            motorstage: 'agilis_motor'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'
            counter: 'timetaggerSlow'
            optimizer1: 'optimizerlogic'
            scannerlogic: 'scannerlogic'
        # define resolution in degrees
        # resolution: 5
        # define time in s per resolution point
        measurement_length: 5
        # timetagger count frequency and apds
        count_frequency: 50
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 1

    switchinglogic:
        module.Class: 'switching_rates_logic.SwitchingLogic'
        connect:
            laser: 'gem532'
            savelogic: 'savelogic'
            counter: 'timetaggerSlow'
            optimizer1: 'optimizerlogic'
            scannerlogic: 'scannerlogic'
        count_frequency: 50
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 1
        # Set powers to investigate (in mW)
        laser_powers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    hbtlogic:
        module.Class: 'hbt_logic.HbtLogic'
        connect:
            savelogic: 'savelogic'
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 1
        bin_width: 1000
        bins: 3000

    imagestacklogic:
        module.Class: 'image_stack_logic.ImageStackLogic'
        connect:
            motorstage: 'agilis_motor'
            savelogic: 'savelogic'
            optimizer1: 'optimizerlogic'
            scannerlogic: 'scannerlogic'
    aomlogic:
        module.Class: 'aom_logic.AomLogic'
        connect:
            voltagescanner: 'nicard'
            laser: 'laserlogic'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'
        voltage: [0.6, 0.65, .7, .75, .8, .85, .9, .95, 1.0, 1.05, 1.10, 1.15, 1.2, 1.3, 1.4]
        efficiency: [0.000, 0.015, 0.033, 0.056, 0.083, 0.110, 0.137, 0.159, 0.181, 0.197, 0.207, 0.221, 0.228, 0.236, 0.237]


gui:
    tray:
        module.Class: 'trayicon.TrayIcon'
    man:
        module.Class: 'manager.managergui.ManagerGui'

    counter_nicard:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    hbt:
        module.Class: 'hbt.hbtgui.HbtGui'
        connect:
            hbtlogic: 'hbtlogic'

    counter_timetagger:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counter_ttlogic'

    confocal:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02

    hbt:
        module.Class: 'hbt.hbtgui.HbtGui'
        connect:
            hbtlogic: 'hbtlogic'

    poimanager:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic1: 'poimanagerlogic'
            confocallogic1: 'scannerlogic'

    aom:
        module.Class: 'aom.aomgui.AomGui'
        connect:
            aomlogic: 'aomlogic'

    laser:
        module.Class: 'laser.laser.LaserGUI'
        connect:
            laserlogic: 'laserlogic'

    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic'
            savelogic: 'savelogic'

    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic'
            savelogic: 'savelogic'

    taskrunner:
        module.Class: 'taskrunner.taskgui.TaskGui'
        connect:
            tasklogic: 'tasklogic'
